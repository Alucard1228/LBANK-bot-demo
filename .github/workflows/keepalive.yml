name: Run LBANK Bot (3x per day, 5h each, state+data)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"    # 00:00 UTC
    - cron: "0 8 * * *"    # 08:00 UTC
    - cron: "0 16 * * *"   # 16:00 UTC

permissions:
  contents: write

concurrency:
  group: lbank-bot
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6h (margen de 1h)

    steps:
      - name: Checkout code (main)
        uses: actions/checkout@v4

      - name: Checkout state branch
        uses: actions/checkout@v4
        with:
          ref: state
          path: state_repo
        continue-on-error: true

      - name: Restore previous paper state (if any)
        run: |
          if [ -f state_repo/paper_state.json ]; then
            cp state_repo/paper_state.json .
            echo "Restored paper_state.json"
          else
            echo "No previous state"
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build .env from secrets
        run: |
          cat > .env << 'ENV'
          MODE=demo_realtime_auto
          EXCHANGE=lbank
          API_KEY=${{ secrets.LBANK_API_KEY }}
          API_SECRET=${{ secrets.LBANK_API_SECRET }}

          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_ALLOWED_IDS=${{ secrets.TELEGRAM_ALLOWED_IDS }}

          # Símbolos en formato LBank (minúsculas + guion bajo)
          SYMBOLS=btc_usdt,eth_usdt,bnb_usdt,sol_usdt,xrp_usdt,ada_usdt,doge_usdt,ton_usdt,link_usdt,avax_usdt,trx_usdt,ltc_usdt,near_usdt

          # Timeframes: 5m para entrada, 15m para contexto
          TIMEFRAME_LTF=5m
          TIMEFRAME_HTF=15m

          RISK_AGRESIVO=0.03
          RISK_MODERADO=0.02
          RISK_CONSERVADOR=0.01

          DEMO_MAX_TRADE_USDT=100
          DEMO_MAX_POSITIONS=5
          MIN_NOTIONAL_USDT=10

          FEE_TAKER=0.001
          SPREAD_BPS=0.0003

          ADX_MIN=20
          ATR_PCTL_MIN=35
          RSI_MIN=45
          RSI_MAX=60
          MAX_EMA_DIST_ATR=0.8

          EMA_FAST=35
          EMA_SLOW=50
          ATR_PERIOD=14

          ATR_K_AGRESIVO=2.2
          ATR_K_MODERADO=2.6
          ATR_K_CONSERVADOR=3.0
          TP_R_AGRESIVO=1.8
          TP_R_MODERADO=2.0
          TP_R_CONSERVADOR=2.2

          ADX_PERIOD=14
          ATR_PCTL_WINDOW=200
          ADX_HIGH=25
          ADX_LOW=18
          ATR_PCTL_HIGH=50
          ATR_PCTL_LOW=30
          PROFILE_LOCK_MIN=20

          CONFIRM_ON_CLOSE=1
          ENTRY_COOLDOWN_MIN=10
          SYMBOL_LOCK_MIN=15
          ALLOW_SAME_SYMBOL=0

          RSI_PERIOD=14
          RSI_ENTRY=50
          RSI_EXIT=47
          RSI_CEILING=60
          USE_RSI_REVERSION=1
          ADX_MIN_REVERSION=18
          RSI_REV_LOW=30

          RUNTIME_SEC=18000   # 5h por ejecución
          SLEEP_SEC=5
          TIMEOUT_MIN=30
          AUTO_SUMMARY_MIN=30

          CSV_PATH=operaciones.csv
          SUMMARY_MAX_OPS=100
          PAPER_START_BALANCE=1000
          ENV

      - name: Live CSV sync while running (5h)
        shell: bash
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # rama data
          rm -rf data_repo
          git clone --depth 1 --branch data "https://github.com/${GITHUB_REPOSITORY}.git" data_repo || (mkdir -p data_repo && cd data_repo && git init && git checkout -b data && cd ..)

          # arranca bot en background
          python run_bot_realtime_auto.py &
          BOT_PID=$!

          END=$((SECONDS + 18000))
          while kill -0 $BOT_PID 2>/dev/null && [ $SECONDS -lt $END ]; do
            if [ -f operaciones.csv ]; then
              cp -f operaciones.csv data_repo/operaciones.csv
              pushd data_repo >/dev/null
              git add operaciones.csv
              git commit -m "data: update csv $(date -u +%FT%TZ)" || true
              git push origin data || true
              popd >/dev/null
            fi
            sleep 600
          done
          wait $BOT_PID || true

      - name: Upload CSV artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: operaciones-${{ github.run_id }}
          path: operaciones.csv

      - name: Save current paper state to 'state' branch
        if: always()
        run: |
          rm -rf state_repo
          git clone --depth 1 --branch state "https://github.com/${GITHUB_REPOSITORY}.git" state_repo || (mkdir -p state_repo && cd state_repo && git init && git checkout -b state && cd ..)
          cp -f paper_state.json state_repo/ 2>/dev/null || true
          cd state_repo
          git add paper_state.json
          git commit -m "state: update $(date -u +%FT%TZ)" || true
          git push origin state || true
