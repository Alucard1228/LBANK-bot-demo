name: demo15h

on:
  schedule:
    # Ajusta la hora en UTC si quieres (diario a las 16:00 UTC):
    - cron: "0 16 * * *"
  workflow_dispatch: {}

jobs:
  slot1:
    name: Slot 1 (~5h)
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install ccxt pandas requests

      - name: Write runner script (OHLCV EMA/ATR)
        run: |
          cat > cron_run_demo_ohlcv.py <<'PY'
          # (el contenido EXACTO del archivo cron_run_demo_ohlcv.py que te pasÃ© arriba)
          PY

      - name: Prepare env & seed CSV
        run: |
          echo "PAPER_START_BALANCE=1000" >> $GITHUB_ENV
          echo "CSV_PATH=operaciones.csv" >> $GITHUB_ENV
          echo "RUNTIME_SEC=17900" >> $GITHUB_ENV
          echo "SLEEP_SEC=20" >> $GITHUB_ENV
          echo "TIMEFRAME=1m" >> $GITHUB_ENV
          echo "SYMBOLS=BTC/USDT,ETH/USDT,SOL/USDT" >> $GITHUB_ENV
          echo "RISK_AGRESIVO=0.05" >> $GITHUB_ENV
          echo "RISK_MODERADO=0.025" >> $GITHUB_ENV
          echo "RISK_CONSERVADOR=0.01" >> $GITHUB_ENV
          echo "FEE_TAKER=0.001" >> $GITHUB_ENV
          echo "SPREAD_BPS=0.0002" >> $GITHUB_ENV
          echo "TELEGRAM_EVENT_NOTIF=1" >> $GITHUB_ENV
          # Secrets opcionales para notificar:
          if [ -n "${{ secrets.TELEGRAM_TOKEN }}" ]; then echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}" >> $GITHUB_ENV; fi
          if [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> $GITHUB_ENV; fi
          [ -f operaciones.csv ] || echo "fecha,modo,par,accion,precio,qty,pnl,equity" > operaciones.csv

      - name: Run slot 1
        run: python cron_run_demo_ohlcv.py

      - name: Upload CSV
        uses: actions/upload-artifact@v4
        with:
          name: ops_slot1
          path: operaciones.csv

  slot2:
    name: Slot 2 (~5h)
    runs-on: ubuntu-latest
    needs: slot1
    timeout-minutes: 360
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install ccxt pandas requests
      - name: Bring CSV from slot1
        uses: actions/download-artifact@v4
        with:
          name: ops_slot1
          path: .
      - name: Ensure runner present
        run: test -f cron_run_demo_ohlcv.py || echo "Runner missing" && ls -la
      - name: Prepare env
        run: |
          echo "CSV_PATH=operaciones.csv" >> $GITHUB_ENV
          echo "RUNTIME_SEC=17900" >> $GITHUB_ENV
          echo "SLEEP_SEC=20" >> $GITHUB_ENV
          echo "TIMEFRAME=1m" >> $GITHUB_ENV
          echo "SYMBOLS=BTC/USDT,ETH/USDT,SOL/USDT" >> $GITHUB_ENV
          echo "RISK_AGRESIVO=0.05" >> $GITHUB_ENV
          echo "RISK_MODERADO=0.025" >> $GITHUB_ENV
          echo "RISK_CONSERVADOR=0.01" >> $GITHUB_ENV
          echo "FEE_TAKER=0.001" >> $GITHUB_ENV
          echo "SPREAD_BPS=0.0002" >> $GITHUB_ENV
          echo "TELEGRAM_EVENT_NOTIF=1" >> $GITHUB_ENV
          if [ -n "${{ secrets.TELEGRAM_TOKEN }}" ]; then echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}" >> $GITHUB_ENV; fi
          if [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> $GITHUB_ENV; fi
      - name: Run slot 2
        run: python cron_run_demo_ohlcv.py
      - name: Upload CSV
        uses: actions/upload-artifact@v4
        with:
          name: ops_slot2
          path: operaciones.csv

  slot3:
    name: Slot 3 (~5h)
    runs-on: ubuntu-latest
    needs: slot2
    timeout-minutes: 360
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install ccxt pandas requests
      - name: Bring CSV from slot2
        uses: actions/download-artifact@v4
        with:
          name: ops_slot2
          path: .
      - name: Ensure runner present
        run: test -f cron_run_demo_ohlcv.py || echo "Runner missing" && ls -la
      - name: Prepare env
        run: |
          echo "CSV_PATH=operaciones.csv" >> $GITHUB_ENV
          echo "RUNTIME_SEC=17900" >> $GITHUB_ENV
          echo "SLEEP_SEC=20" >> $GITHUB_ENV
          echo "TIMEFRAME=1m" >> $GITHUB_ENV
          echo "SYMBOLS=BTC/USDT,ETH/USDT,SOL/USDT" >> $GITHUB_ENV
          echo "RISK_AGRESIVO=0.05" >> $GITHUB_ENV
          echo "RISK_MODERADO=0.025" >> $GITHUB_ENV
          echo "RISK_CONSERVADOR=0.01" >> $GITHUB_ENV
          echo "FEE_TAKER=0.001" >> $GITHUB_ENV
          echo "SPREAD_BPS=0.0002" >> $GITHUB_ENV
          echo "TELEGRAM_EVENT_NOTIF=1" >> $GITHUB_ENV
          if [ -n "${{ secrets.TELEGRAM_TOKEN }}" ]; then echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}" >> $GITHUB_ENV; fi
          if [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> $GITHUB_ENV; fi
      - name: Run slot 3
        run: python cron_run_demo_ohlcv.py
      - name: Upload CSV final
        uses: actions/upload-artifact@v4
        with:
          name: operaciones_final
          path: operaciones.csv
